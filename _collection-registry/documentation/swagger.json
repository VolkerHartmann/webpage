
{"openapi":"3.0.1","info":{"title":"RDA Collections API","description":"The RDA Collections API Recommendation is a unified model and interface specification for CRUD operations on data collections, with particular observance of persistent identification and typing aspects. The recommendation allows building collections within diverse domains and then sharing or expanding them across disciplines. This recommendation has first been released in September 2017 for the 10th RDA Plenary in Montreal, Canada.","contact":{"name":"KIT Data Manager Support","url":"https://github.com/kit-data-manager","email":"support@datamanager.kit.edu"},"license":{"name":"Apache 2.0","url":"http://www.apache.org/licenses/LICENSE-2.0.html"},"version":"1.0.0"},"servers":[{"url":"http://localhost:8070","description":"Generated server url"}],"paths":{"/api/v1/collections":{"get":{"tags":["collections-api-controller"],"operationId":"collectionsGet_1","parameters":[{"name":"f_modelType","in":"query","description":"Filter response by the modelType property of the collection.","required":false,"schema":{"type":"string"}},{"name":"f_memberType","in":"query","description":"Filter response by the data type of contained collection member. A collection will meet this requirement if any of its members are of the requested type.","required":false,"schema":{"type":"string"}},{"name":"f_ownership","in":"query","description":"Filter response by the ownership property of the collection","required":false,"schema":{"type":"string"}},{"name":"pgbl","in":"query","required":true,"schema":{"required":["page","size"],"type":"object","properties":{"page":{"minimum":0,"type":"integer","format":"int32"},"size":{"maximum":2000,"minimum":1,"type":"integer","format":"int32"},"sort":{"type":"array","items":{"type":"string"}}}}},{"name":"page","in":"query","description":"Page you want to retrieve (0..N)","schema":{"type":"integer","default":"0"}},{"name":"size","in":"query","description":"Number of records per page.","schema":{"type":"integer","default":"20"}},{"name":"sort","in":"query","description":"Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.","schema":{"type":"array","items":{"type":"string"}}}],"responses":{"400":{"description":"Invalid Input. The query was malformed.","content":{"application/vnd.datamanager.d3+json":{"schema":{"$ref":"#/components/schemas/DataWrapper"}}}},"200":{"description":"A resultset containing a list of collection objects.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CollectionResultSet"}},"application/vnd.datamanager.d3+json":{"schema":{"$ref":"#/components/schemas/CollectionResultSet"}}}}}},"post":{"tags":["collections-api-controller"],"operationId":"collectionsPost","requestBody":{"description":"The properties of the collection.","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/CollectionObject"}}}},"required":true},"responses":{"202":{"description":"Accepted create request. Empty response body. (For asyncrhonous requests,  if supported by the service features).","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/CollectionObject"}}}}},"400":{"description":"Invalid Input. The collection properties were malformed or invalid.","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/CollectionObject"}}}}},"201":{"description":"Successful creation","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/CollectionObject"}}}}},"401":{"description":"Unauthorized. Request was not authorized.","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/CollectionObject"}}}}},"409":{"description":"Conflict. A collection with the same ID as the one posted already exists.","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/CollectionObject"}}}}}}}},"/api/v1/collections/{id}/**":{"get":{"tags":["collections-api-controller"],"operationId":"collectionsIdGet","parameters":[{"name":"id","in":"path","description":"Identifier for the collection","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"The requested collection","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CollectionObject"}}}},"404":{"description":"The requested collection was not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CollectionObject"}}}},"401":{"description":"Unauthorized. Request was not authorized.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CollectionObject"}}}}}},"put":{"tags":["collections-api-controller"],"operationId":"collectionsIdPut","parameters":[{"name":"id","in":"path","description":"Persistent identifier for the collection","required":true,"schema":{"type":"string"}}],"requestBody":{"description":"The properties of the collection to be updated.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CollectionObject"}}},"required":true},"responses":{"400":{"description":"Invalid Input. The collection properties were malformed or invalid.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CollectionObject"}}}},"200":{"description":"Successful update, returns the updated collection.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CollectionObject"}}}},"404":{"description":"The collection identified for update was not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CollectionObject"}}}},"403":{"description":"Forbidden. May be returned, for example, if a request was made to update a collection whose metadata is not mutable.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CollectionObject"}}}},"202":{"description":"Accepted update request. Empty response body. (For asynchronous requests if supported by service features.)","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CollectionObject"}}}},"401":{"description":"Unauthorized. Request was not authorized.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CollectionObject"}}}}}},"delete":{"tags":["collections-api-controller"],"operationId":"collectionsIdDelete","parameters":[{"name":"id","in":"path","description":"identifier for the collection","required":true,"schema":{"type":"string"}}],"responses":{"404":{"description":"The collection identified for deletion was not found"},"200":{"description":"Successful deletion. Empty response body."},"202":{"description":"Accepted deletion request. Empty response body. (For asynchronous requests if supported by service features.)"},"401":{"description":"Unauthorized. Request was not authorized."}}}},"/api/v1/collections/{id}/**/members/{mid}/**":{"get":{"tags":["collections-api-controller"],"operationId":"collectionsIdMembersMidGet","parameters":[{"name":"id","in":"path","description":"Identifier for the collection","required":true,"schema":{"type":"string"}},{"name":"mid","in":"path","description":"Identifier for the collection member item.","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"The requested member","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MemberItem"}}}},"404":{"description":"Not found. The requested collection or member item was not found.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MemberItem"}}}},"401":{"description":"Unauthorized. Request was not authorized.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MemberItem"}}}}}},"put":{"tags":["collections-api-controller"],"operationId":"collectionsIdMembersMidPut","parameters":[{"name":"id","in":"path","description":"Identifier for the collection","required":true,"schema":{"type":"string"}},{"name":"mid","in":"path","description":"Identifier for the collection member","required":true,"schema":{"type":"string"}}],"requestBody":{"description":"Collection item mapping metadata","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MemberItem"}}},"required":true},"responses":{"400":{"description":"Invalid Input","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MemberItem"}}}},"403":{"description":"Forbidden. May be returned, for example, if a request was made to update an item in a static collection.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MemberItem"}}}},"200":{"description":"Successful update. The updated CollectionItemMappingMetadata is returned in the response.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MemberItem"}}}},"404":{"description":"Not found. The requested collection or member item was not found.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MemberItem"}}}},"202":{"description":"Accepted update request. Empty response body. (For asynchronous requests if supported by service features.)","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MemberItem"}}}},"401":{"description":"Unauthorized. Request was not authorized.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MemberItem"}}}}}},"delete":{"tags":["collections-api-controller"],"operationId":"collectionsIdMembersMidDelete","parameters":[{"name":"id","in":"path","description":"Persistent identifier for the collection","required":true,"schema":{"type":"string"}},{"name":"mid","in":"path","description":"Identifier for the collection member","required":true,"schema":{"type":"string"}}],"responses":{"202":{"description":"Accepted request. Empty response body. (For asynchronous requests, if supported by service features.)"},"404":{"description":"Not Found"},"200":{"description":"Unexpected error"},"403":{"description":"Forbidden. May be returned, for example, if a request was made to remove  item from a static collection."},"401":{"description":"Unauthorized. Request was not authorized."}}}},"/api/v1/collections/{id}/**/capabilities":{"get":{"tags":["collections-api-controller"],"operationId":"collectionsIdCapabilitiesGet","parameters":[{"name":"id","in":"path","description":"Identifier for the collection","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"The collection capabilities metadata.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CollectionCapabilities"}}}},"404":{"description":"The collection identified was not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CollectionCapabilities"}}}},"401":{"description":"Unauthorized. Request was not authorized.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/CollectionCapabilities"}}}}}}},"/api/v1/collections/{id}/**/ops/union/{otherId}/**":{"get":{"tags":["collections-api-controller"],"operationId":"collectionsIdOpsUnionOtherIdGet","parameters":[{"name":"id","in":"path","description":"Identifier for the first collection in the operation","required":true,"schema":{"type":"string"}},{"name":"otherId","in":"path","description":"Identifier for the second collection in the operation","required":true,"schema":{"type":"string"}},{"name":"pgbl","in":"query","required":true,"schema":{"required":["page","size"],"type":"object","properties":{"page":{"minimum":0,"type":"integer","format":"int32"},"size":{"maximum":2000,"minimum":1,"type":"integer","format":"int32"},"sort":{"type":"array","items":{"type":"string"}}}}},{"name":"page","in":"query","description":"Page you want to retrieve (0..N)","schema":{"type":"integer","default":"0"}},{"name":"size","in":"query","description":"Number of records per page.","schema":{"type":"integer","default":"20"}},{"name":"sort","in":"query","description":"Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.","schema":{"type":"array","items":{"type":"string"}}}],"responses":{"404":{"description":"One or both of the requested collections was not found.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MemberResultSet"}}}},"200":{"description":"A resultset containing the union of member items from the two collections","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MemberResultSet"}}}},"401":{"description":"Unauthorized. Request was not authorized.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MemberResultSet"}}}}}}},"/api/v1/collections/{id}/**/members":{"get":{"tags":["collections-api-controller"],"operationId":"collectionsIdMembersGet","parameters":[{"name":"id","in":"path","description":"Identifier for the collection","required":true,"schema":{"type":"string"}},{"name":"f_datatype","in":"query","description":"Filter response to members matching the requested datatype.","required":false,"schema":{"type":"string"}},{"name":"f_role","in":"query","description":"Filter response to members who are assigned the requested role. (Only if the collection capability supportsRoles is true).","required":false,"schema":{"type":"string"}},{"name":"f_index","in":"query","description":"Filter response to the members assigned the requested index. (Only if the collection capability isOrdered is true).","required":false,"schema":{"type":"integer","format":"int32"}},{"name":"f_dateAdded","in":"query","description":"Filter response to the membered added on the requestd datetime.","required":false,"schema":{"type":"integer","format":"int64"}},{"name":"expandDepth","in":"query","description":"expand members which are collections to this depth. may not exceed maxExpansionDepth feature setting for the service.","required":false,"schema":{"type":"integer","format":"int32"}},{"name":"pgbl","in":"query","required":true,"schema":{"required":["page","size"],"type":"object","properties":{"page":{"minimum":0,"type":"integer","format":"int32"},"size":{"maximum":2000,"minimum":1,"type":"integer","format":"int32"},"sort":{"type":"array","items":{"type":"string"}}}}},{"name":"page","in":"query","description":"Page you want to retrieve (0..N)","schema":{"type":"integer","default":"0"}},{"name":"size","in":"query","description":"Number of records per page.","schema":{"type":"integer","default":"20"}},{"name":"sort","in":"query","description":"Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.","schema":{"type":"array","items":{"type":"string"}}}],"responses":{"200":{"description":"A resultset containing the list of member items in the identified collection.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MemberResultSet"}}}},"400":{"description":"Invalid input. The filter query was malformed.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MemberResultSet"}}}},"404":{"description":"The collection identified was not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MemberResultSet"}}}},"401":{"description":"Unauthorized. Request was not authorized.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MemberResultSet"}}}}}},"post":{"tags":["collections-api-controller"],"operationId":"collectionsIdMembersPost","parameters":[{"name":"id","in":"path","description":"Identifier for the collection","required":true,"schema":{"type":"string"}}],"requestBody":{"description":"The properties of the member item to add to the collection. Id may be required.","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/MemberItem"}}}},"required":true},"responses":{"400":{"description":"Invalid Request. Indicates that member properties were incorrect or invalid in  some way, e.g. if the collection only allows items a a specific type.","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/MemberItem"}}}}},"404":{"description":"Not found. The collection was not found for adding items.","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/MemberItem"}}}}},"409":{"description":"Conflict. A member item with the same ID as the one posted already exists.","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/MemberItem"}}}}},"202":{"description":"Accepted add request. Empty response body. (For asyncrhonous requests,  if supported by the service features).","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/MemberItem"}}}}},"401":{"description":"Unauthorized. Request was not authorized.","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/MemberItem"}}}}},"403":{"description":"Forbidden. May be returned, for example, if a request was made to add an item to a static collection or if adding all elements would exceed the max. collection size.","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/MemberItem"}}}}},"201":{"description":"Successful creation","content":{"application/json":{"schema":{"type":"array","items":{"type":"MemberItem"}}}}}}}},"/api/v1/collections/{id}/**/ops/findMatch":{"post":{"tags":["collections-api-controller"],"operationId":"collectionsIdOpsFindMatchPost","parameters":[{"name":"id","in":"path","description":"identifier for the collection","required":true,"schema":{"type":"string"}},{"name":"page","in":"query","description":"Page you want to retrieve (0..N)","schema":{"type":"integer","default":"0"}},{"name":"size","in":"query","description":"Number of records per page.","schema":{"type":"integer","default":"20"}},{"name":"sort","in":"query","description":"Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.","schema":{"type":"array","items":{"type":"string"}}}],"requestBody":{"description":"the member item properties to use when matching","content":{"application/json":{"schema":{"type":"object","properties":{"memberProperties":{"$ref":"#/components/schemas/MemberItem"},"pgbl":{"required":["page","size"],"type":"object","properties":{"page":{"minimum":0,"type":"integer","format":"int32"},"size":{"maximum":2000,"minimum":1,"type":"integer","format":"int32"},"sort":{"type":"array","items":{"type":"string"}}}}}}}},"required":true},"responses":{"200":{"description":"A resulset containing the matching member items from the two collections.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MemberResultSet"}}}},"404":{"description":"The collection identified was not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MemberResultSet"}}}},"401":{"description":"Unauthorized. Request was not authorized.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MemberResultSet"}}}}}}},"/api/v1/collections/{id}/**/ops/flatten":{"get":{"tags":["collections-api-controller"],"operationId":"collectionsIdOpsFlattenGet","parameters":[{"name":"id","in":"path","description":"Identifier for the collection to be flattened","required":true,"schema":{"type":"string"}},{"name":"pgbl","in":"query","required":true,"schema":{"required":["page","size"],"type":"object","properties":{"page":{"minimum":0,"type":"integer","format":"int32"},"size":{"maximum":2000,"minimum":1,"type":"integer","format":"int32"},"sort":{"type":"array","items":{"type":"string"}}}}},{"name":"page","in":"query","description":"Page you want to retrieve (0..N)","schema":{"type":"integer","default":"0"}},{"name":"size","in":"query","description":"Number of records per page.","schema":{"type":"integer","default":"20"}},{"name":"sort","in":"query","description":"Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.","schema":{"type":"array","items":{"type":"string"}}}],"responses":{"404":{"description":"One or both of the requested collections was not found.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MemberResultSet"}}}},"200":{"description":"A resultset containing the union of member items from the two collections","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MemberResultSet"}}}},"401":{"description":"Unauthorized. Request was not authorized.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MemberResultSet"}}}}}}},"/api/v1/collections/{id}/**/members/{mid}/**/properties/{property}/**":{"get":{"tags":["collections-api-controller"],"operationId":"collectionsIdMembersMidPropertiesPropertyGet","parameters":[{"name":"id","in":"path","description":"Identifier for the collection","required":true,"schema":{"type":"string"}},{"name":"mid","in":"path","description":"Identifier for the collection member item.","required":true,"schema":{"type":"string"}},{"name":"property","in":"path","description":"the name of a property to retrieve (e.g. index)","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"The requested member","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MemberItem"}}}},"404":{"description":"Not found. The requested collection or member item was not found.","content":{"application/json":{"schema":{"type":"string"}}}},"401":{"description":"Unauthorized. Request was not authorized.","content":{"application/json":{"schema":{"type":"string"}}}}}},"put":{"tags":["collections-api-controller"],"operationId":"collectionsIdMembersMidPropertiesPropertyPut","parameters":[{"name":"id","in":"path","description":"Identifier for the collection","required":true,"schema":{"type":"string"}},{"name":"mid","in":"path","description":"Identifier for the collection member item.","required":true,"schema":{"type":"string"}},{"name":"property","in":"path","description":"the name of a property to update","required":true,"schema":{"type":"string"}}],"requestBody":{"description":"new property value","content":{"application/json":{"schema":{"type":"string"}}},"required":true},"responses":{"202":{"description":"Accepted update request. Empty response body. (For asynchronous requests, if supported by service features.)","content":{"application/json":{"schema":{"type":"string"}}}},"200":{"description":"Successful update. The updated member item is returned in the response.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MemberItem"}}}},"404":{"description":"Not found. The requested collection or member item was not found.","content":{"application/json":{"schema":{"type":"string"}}}},"401":{"description":"Unauthorized. Request was not authorized.","content":{"application/json":{"schema":{"type":"string"}}}},"403":{"description":"Forbidden. May be returned, for example, if a request was made to update a static item.","content":{"application/json":{"schema":{"type":"string"}}}}}},"delete":{"tags":["collections-api-controller"],"operationId":"collectionsIdMembersMidPropertiesPropertyDelete","parameters":[{"name":"id","in":"path","description":"Identifier for the collection","required":true,"schema":{"type":"string"}},{"name":"mid","in":"path","description":"Identifier for the collection member item.","required":true,"schema":{"type":"string"}},{"name":"property","in":"path","description":"the name of a property to update","required":true,"schema":{"type":"string"}}],"responses":{"200":{"description":"Successful deletion. Empty response body."},"202":{"description":"Accepted delete request. Empty response body. (For asyncrhonous requests, if supported by service features.)"},"404":{"description":"Not found. The requested collection or member item was not found."},"403":{"description":"Forbidden. May be returned, for example, if a request was made to delete a required metadata property or update a static item."},"401":{"description":"Unauthorized. Request was not authorized."}}}},"/api/v1/collections/{id}/**/ops/intersection/{otherId}/**":{"get":{"tags":["collections-api-controller"],"operationId":"collectionsIdOpsIntersectionOtherIdGet","parameters":[{"name":"id","in":"path","description":"Identifier for the first collection in the operation","required":true,"schema":{"type":"string"}},{"name":"otherId","in":"path","description":"Identifier for the second collection in the operation","required":true,"schema":{"type":"string"}},{"name":"pgbl","in":"query","required":true,"schema":{"required":["page","size"],"type":"object","properties":{"page":{"minimum":0,"type":"integer","format":"int32"},"size":{"maximum":2000,"minimum":1,"type":"integer","format":"int32"},"sort":{"type":"array","items":{"type":"string"}}}}},{"name":"page","in":"query","description":"Page you want to retrieve (0..N)","schema":{"type":"integer","default":"0"}},{"name":"size","in":"query","description":"Number of records per page.","schema":{"type":"integer","default":"20"}},{"name":"sort","in":"query","description":"Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.","schema":{"type":"array","items":{"type":"string"}}}],"responses":{"404":{"description":"One or both of the requested collections was not found.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MemberResultSet"}}}},"401":{"description":"Unauthorized. Request was not authorized.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MemberResultSet"}}}},"200":{"description":"A resultset containing the intersection of member items from the two collections.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MemberResultSet"}}}}}}},"/api/v1/features":{"get":{"tags":["features-api-controller"],"operationId":"featuresGet","responses":{"200":{"description":"Service Level Features","content":{"application/json":{"schema":{"$ref":"#/components/schemas/ServiceFeatures"}}}}}}}},"components":{"schemas":{"CollectionCapabilities":{"required":["appendsToEnd","isOrdered","maxLength","membershipIsMutable","propertiesAreMutable","restrictedToType","supportsRoles"],"type":"object","properties":{"id":{"type":"integer","format":"int64"},"isOrdered":{"type":"boolean","description":"Identifies whether the collection items are kept in a consistent, meaningful order. The exact nature of the ordering is not specified, but see also appendsToEnd property."},"appendsToEnd":{"type":"boolean","description":"For an ordered collection, indicates that new items are appended to the end rather than insertable at a specified, possibly invalid, index points. Only valid if isOrdered is true."},"supportsRoles":{"type":"boolean","description":"Indicates whether the collection supports assigning roles to its member items. Available roles are determined by the Collection Model type."},"membershipIsMutable":{"type":"boolean","description":"Indicates whether collection membership mutable (i.e. whether members can be added and removed)"},"propertiesAreMutable":{"type":"boolean","description":"Indicates whether collection properties are mutable (i.e. can the metadata of this collection be changed)"},"restrictedToType":{"type":"string","description":"If specified, indicates that the collection is made up of homogenous items of the specified type. Type should be specified using the PID of a registered Data Type or a controlled vocabulary."},"maxLength":{"type":"integer","description":"The maximum length of the Collection. -1 means length is not restricted.","format":"int32"}},"description":"Capabilities define the set of actions that are supported by a collection."},"CollectionItemMappingMetadata":{"type":"object","properties":{"role":{"type":"string","description":"The role that applies to this item. Only available if the collection supportsRoles per its capabilities. A Controlled Vocabulary should be used."},"index":{"type":"integer","description":"position of the item in the collection. Only available if the Collection isOrdered per its capabilities.","format":"int32"},"dateAdded":{"type":"integer","description":"The date the item was added to the collection.","format":"int64"},"dateUpdated":{"type":"integer","description":"The date the item's metadata were last updated.","format":"int64"}},"description":"metadata on an item which is available by mapping from capabilities"},"CollectionObject":{"required":["capabilities","id","properties"],"type":"object","properties":{"id":{"type":"string","description":"Identifier for the collection. This is ideally a PID."},"capabilities":{"$ref":"#/components/schemas/CollectionCapabilities"},"properties":{"$ref":"#/components/schemas/CollectionProperties"},"description":{"type":"string","description":"Descriptive metadata about the collection.  The properties available for this object are dependent upon the description ontology used, as define in the collection properties."},"members":{"uniqueItems":true,"type":"array","items":{"$ref":"#/components/schemas/Membership"}}},"description":"Defines the schema for a collection object."},"CollectionProperties":{"required":["dateCreated","descriptionOntology","hasAccessRestrictions","license","modelType","ownership"],"type":"object","properties":{"id":{"type":"integer","format":"int64"},"dateCreated":{"type":"integer","description":"The date the collection was created.","format":"int64"},"ownership":{"type":"string","description":"Indicates the owner of the Collection. Implementation is expected to use a controlled vocabulary or PIDs."},"license":{"type":"string","description":"Indicates the license that applies to the Collection. Implementation is expected to use a controlled vocabulary, stable URIs or PIDs of registered data types. "},"modelType":{"type":"string","description":"Identifies the model that the collection adheres to. Iimplementation is expected to use a controlled vocabulary, or PIDs of registered data types. "},"hasAccessRestrictions":{"type":"boolean","description":"Indicates whether the collection is fully open or has access restrictions. "},"memberOf":{"uniqueItems":true,"type":"array","description":"If provided, this is a list of collection identifiers to which this collection itself belongs. This property is only meaningful if the service features supports a  maximumExpansionDepth > 0.","items":{"type":"string","description":"If provided, this is a list of collection identifiers to which this collection itself belongs. This property is only meaningful if the service features supports a  maximumExpansionDepth > 0."}},"descriptionOntology":{"type":"string","description":"Identifies the ontology used for descriptive metadata. Implementation is expected to supply the URI of a controlled vocabulary."}},"description":"Functional Properties of the Collection"},"MemberItem":{"required":["id","location"],"type":"object","properties":{"id":{"type":"string","description":"Identifier for the member"},"location":{"type":"string","description":"Location at which the item data can be retrieved"},"description":{"type":"string","description":"Human readable description"},"datatype":{"type":"string","description":"URI of the data type of this item"},"ontology":{"type":"string","description":"URI of an ontology model class that applies to this item"},"mappings":{"$ref":"#/components/schemas/CollectionItemMappingMetadata"}},"description":"A member item in a collection"},"Membership":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"member":{"$ref":"#/components/schemas/MemberItem"},"mappings":{"$ref":"#/components/schemas/CollectionItemMappingMetadata"}}},"CollectionResultSet":{"required":["contents"],"type":"object","properties":{"contents":{"type":"array","description":"list of Collection Objects returned in response to a query","items":{"$ref":"#/components/schemas/CollectionObject"}},"next_cursor":{"type":"string","description":"If the service supports pagination, and the resultset is paginated, this will be a cursor which can be used to retrieve the next page in the results."},"prev_cursor":{"type":"string","description":"If the service supports pagination, and the resultset is paginated, this will be a cursor which can be used to retrieve the next page in the results."}},"description":"A resultset containing a potentially iterable list of Collections Objects. This is the  schema for the response to any request which retrieves collection items."},"DataWrapper":{"type":"object","properties":{"nodes":{"uniqueItems":true,"type":"array","items":{"$ref":"#/components/schemas/Node"}},"links":{"uniqueItems":true,"type":"array","items":{"$ref":"#/components/schemas/Link"}}}},"Link":{"type":"object","properties":{"href":{"type":"string"},"hreflang":{"type":"string"},"title":{"type":"string"},"type":{"type":"string"},"deprecation":{"type":"string"},"profile":{"type":"string"},"name":{"type":"string"},"templated":{"type":"boolean"}}},"Node":{"required":["jsonType"],"type":"object","properties":{"type":{"type":"string","enum":["COLLECTION","MEMBER_ITEM"]},"id":{"type":"string"},"description":{"type":"string"},"radius":{"type":"integer","format":"int32"},"jsonType":{"type":"string"}},"discriminator":{"propertyName":"jsonType"}},"MemberResultSet":{"required":["contents"],"type":"object","properties":{"contents":{"type":"array","description":"list of Member Items returned in responses to a query","items":{"$ref":"#/components/schemas/MemberItem"}},"next_cursor":{"type":"string","description":"If the service supports pagination, and the resultset is paginated, this will be cursor which can be used to retrieve the next page in the results."},"prev_cursor":{"type":"string","description":"If the service supports pagination, and the resultset is paginated, this will be cursor which can be used to retrieve the next page in the results."}},"description":"A resultset containing a potentially iterable list of Member Items. This is the schema for the response to any request which retrieves collection members."},"ServiceFeatures":{"required":["asynchronousActions","enforcesAccess","maxExpansionDepth","providesCollectionPids","providesVersioning","ruleBasedGeneration","supportedCollectionOperations","supportedModelTypes","supportsPagination"],"type":"object","properties":{"providesCollectionPids":{"type":"boolean","description":"Indicates whether this services provides collection PIDs for new collections. If this is false, requests for new Collections must supply the PID for the collection. If this is true, the Service will use its default PID provider (as advertised via the collectionPidProviderType feature) to create new PIDs to assign to new Collections."},"collectionPidProviderType":{"type":"string","description":"Identifies the PID provider service used by the Collection Service to create new PIDs for new Collection. Required if providesCollectionPids is true, otherwise this property is optional and has no meaning. Recommended to use a Controlled Vocabulary or registered Data Types"},"enforcesAccess":{"type":"boolean","description":"Indicates whether or not the service enforces access controls on requests. Implementation details access are left up to the implementor. This flag simply states whether or not the Service enforces access."},"supportsPagination":{"type":"boolean","description":"Indicates whether or not the service offers pagination (via cursors) of response data."},"asynchronousActions":{"type":"boolean","description":"Indicates whether or not actions such as update, delete occur synchronously or may be queued for later action."},"ruleBasedGeneration":{"type":"boolean","description":"Indicates whether or not the service allows rule-based generation of new collections."},"maxExpansionDepth":{"type":"integer","description":"The maximum depth to which collection members can be expanded. A value of 0 means that expansion is not supppoted. A value of -1 means that the collections can be expanded to infinite depth.","format":"int32"},"providesVersioning":{"type":"boolean","description":"Indicates whether the service offers support for versioning of Collections. Implementation details are left up to the implementor."},"supportedCollectionOperations":{"type":"array","description":"List of collection-level set operations that are supported by this service.","items":{"type":"object","description":"List of collection-level set operations that are supported by this service."}},"supportedModelTypes":{"type":"array","description":"List of collection model types supported by this service.  Recommended to use a Controlled Vocabulary or registered Data Types","items":{"type":"object","description":"List of collection model types supported by this service.  Recommended to use a Controlled Vocabulary or registered Data Types"}}},"description":"Describes the properties of the response to the Service /features request."}},"securitySchemes":{"bearer-jwt":{"type":"http","name":"Authorization","in":"header","scheme":"bearer","bearerFormat":"JWT"}}}}