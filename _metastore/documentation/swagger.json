{"openapi":"3.0.1","info":{"title":"MetaStore Microservice - RESTful API","description":"This webpage describes the RESTful interface of the KIT Data Manager MetaStore Microservice.","contact":{"name":"KIT Data Manager Support","url":"https://github.com/kit-data-manager","email":"support@datamanager.kit.edu"},"license":{"name":"Apache 2.0","url":"http://www.apache.org/licenses/LICENSE-2.0.html"},"version":"1.0.0"},"servers":[{"url":"http://localhost:8040/","description":"Generated server url"}],"tags":[{"name":"Schema Registry"},{"name":"Metadata Repository"}],"paths":{"/api/v1/schemas/{schemaId}":{"get":{"tags":["Schema Registry"],"summary":"Get schema record by schema id (and version).","description":"Obtain is single schema record by its schema id. Depending on a user's role, accessing a specific record may be allowed or forbidden. Furthermore, a specific version of the record can be returned by providing a version number as request parameter. If no version is specified, the most recent version is returned.","operationId":"getSchemaDocumentById_1","parameters":[{"name":"schemaId","in":"path","description":"The schema id.","required":true,"schema":{"type":"string"}},{"name":"version","in":"query","description":"The version of the record.","required":false,"schema":{"type":"integer","format":"int64"}}],"responses":{"200":{"description":"OK and the record is returned if the record exists and the user has sufficient permission.","content":{"application/hal+json":{"schema":{"type":"string"}},"application/vnd.datamanager.schema-record+json":{"schema":{"$ref":"#/components/schemas/MetadataSchemaRecord"}}}},"404":{"description":"Not found is returned, if no record for the provided id and version was found.","content":{"application/hal+json":{"schema":{"type":"string"}}}},"401":{"description":"Unauthorized is returned if authorization in required but was not provided.","content":{"application/hal+json":{"schema":{"type":"string"}}}},"403":{"description":"Forbidden is returned if the caller has no sufficient privileges.","content":{"application/hal+json":{"schema":{"type":"string"}}}}}},"put":{"tags":["Schema Registry"],"summary":"Update a schema record.","description":"Apply an update to the schema record and/or schema document with the provided schema id. The update capabilities for a schema record are quite limited. An update is always related to the most recent version. Only the associated mimeType and acl can be changed.  All other fields are updated automatically or are read-only. Updating only the metadata record does not affect the version number. A new version is only created while providing a (new) schema document.","operationId":"updateRecord","parameters":[{"name":"schemaId","in":"path","description":"The schema id.","required":true,"schema":{"type":"string"}},{"name":"If-Match","in":"header","description":"ETag of the object. Please use quotation marks!","required":true}],"requestBody":{"content":{"multipart/form-data":{"schema":{"type":"object","properties":{"record":{"type":"string","description":"Json representation of the schema record.","format":"binary"},"schema":{"type":"string","description":"The metadata schema document associated with the record.","format":"binary"}}}}}},"responses":{"200":{"description":"OK is returned in case of a successful update. The updated record is returned in the response.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MetadataSchemaRecord"}}}},"400":{"description":"Bad Request is returned if the provided schema record/schema document is invalid.","content":{"application/json":{"schema":{"type":"string"}}}},"404":{"description":"Not Found is returned if no record for the provided id was found.","content":{"application/json":{"schema":{"type":"string"}}}},"401":{"description":"Unauthorized is returned if authorization in required but was not provided.","content":{"application/json":{"schema":{"type":"string"}}}},"403":{"description":"Forbidden is returned if the caller has no sufficient privileges.","content":{"application/json":{"schema":{"type":"string"}}}}}},"delete":{"tags":["Schema Registry"],"summary":"Delete a schema record.","description":"Delete a single schema record. Deleting a record typically requires the caller to have special permissions. In some cases, deleting a record can also be available for the owner or other privileged users or can be forbidden at all. Deletion of a record affects all versions of the particular record.","operationId":"deleteRecord","parameters":[{"name":"schemaId","in":"path","description":"The schema id.","required":true,"schema":{"type":"string"}},{"name":"If-Match","in":"header","description":"ETag of the object. Please use quotation marks!","required":true}],"responses":{"204":{"description":"No Content is returned as long as no error occurs while deleting a record. Multiple delete operations to the same record will also return HTTP 204 even if the deletion succeeded in the first call.","content":{"application/hal+json":{"schema":{"type":"string"}}}},"401":{"description":"Unauthorized is returned if authorization in required but was not provided.","content":{"application/hal+json":{"schema":{"type":"string"}}}},"403":{"description":"Forbidden is returned if the caller has no sufficient privileges.","content":{"application/hal+json":{"schema":{"type":"string"}}}}}}},"/api/v1/metadata/{id}":{"get":{"tags":["Metadata Repository"],"summary":"Get a metadata record by id.","description":"Obtain a single record by its resource identifier. Depending on a user's role, accessing a specific record may be allowed or forbidden. Furthermore, a specific version of the record can be returned by providing a version number as request parameter.","operationId":"getMetadataDocumentById_1","parameters":[{"name":"id","in":"path","description":"The record identifier or related resource identifier.","required":true,"schema":{"type":"string"}},{"name":"version","in":"query","description":"The version of the record. This parameter only has an effect if versioning  is enabled.","required":false,"schema":{"type":"integer","format":"int64"}}],"responses":{"200":{"description":"OK and the record is returned if the record exists and the user has sufficient permission.","content":{"application/hal+json":{"schema":{"type":"string"}},"application/vnd.datamanager.metadata-record+json":{"schema":{"$ref":"#/components/schemas/MetadataRecord"}}}},"404":{"description":"Not found is returned, if no record for the provided id or version was found.","content":{"application/hal+json":{"schema":{"type":"string"}}}},"401":{"description":"Unauthorized is returned if authorization in required but was not provided.","content":{"application/hal+json":{"schema":{"type":"string"}}}},"403":{"description":"Forbidden is returned if the caller has no sufficient privileges.","content":{"application/hal+json":{"schema":{"type":"string"}}}}}},"put":{"tags":["Metadata Repository"],"summary":"Update a metadata record and/or metadata document.","description":"Apply an update to the metadata record with the provided resource identifier and/or its accociated metadata document.If versioning is enabled and a (new) metadata document is provided, a new version of the record is created. Otherwise, the record and/or its metadata document are overwritten.","operationId":"updateRecord_1","parameters":[{"name":"id","in":"path","description":"The resource identifier.","required":true,"schema":{"type":"string"}},{"name":"If-Match","in":"header","description":"ETag of the object. Please use quotation marks!","required":true}],"requestBody":{"content":{"multipart/form-data":{"schema":{"type":"object","properties":{"record":{"type":"string","description":"JSON representation of the metadata record.","format":"binary"},"document":{"type":"string","description":"The metadata document associated with the record. The document must match the schema defined in the record.","format":"binary"}}}}}},"responses":{"200":{"description":"OK is returned in case of a successful update, e.g. the record (if provided) was in the correct format and the document (if provided) matches the provided schema id.The updated record is returned in the response.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MetadataRecord"}}}},"400":{"description":"Bad Request is returned if the provided metadata record is invalid or if the validation using the provided schema failed.","content":{"application/json":{"schema":{"type":"string"}}}},"404":{"description":"Not Found is returned if no record for the provided id or no schema for the provided schema id was found.","content":{"application/json":{"schema":{"type":"string"}}}},"401":{"description":"Unauthorized is returned if authorization in required but was not provided.","content":{"application/json":{"schema":{"type":"string"}}}},"403":{"description":"Forbidden is returned if the caller has no sufficient privileges.","content":{"application/json":{"schema":{"type":"string"}}}}}},"delete":{"tags":["Metadata Repository"],"summary":"Delete a record.","description":"Delete a single metadata record and the associated metadata document linked with the provided resource identifier. Deleting a record typically requires the caller to have special permissions. In some cases, deleting a record can also be available for the owner or other privileged users or can be forbidden at all. Deletion of a record affects all versions of the particular record.","operationId":"deleteRecord_1","parameters":[{"name":"id","in":"path","description":"The resource identifier.","required":true,"schema":{"type":"string"}},{"name":"If-Match","in":"header","description":"ETag of the object. Please use quotation marks!","required":true}],"responses":{"204":{"description":"No Content is returned as long as no error occurs while deleting a record. Multiple delete operations to the same record will also return HTTP 204 even if the deletion succeeded in the first call.","content":{"application/hal+json":{"schema":{"type":"string"}}}},"401":{"description":"Unauthorized is returned if authorization in required but was not provided.","content":{"application/hal+json":{"schema":{"type":"string"}}}},"403":{"description":"Forbidden is returned if the caller has no sufficient privileges.","content":{"application/hal+json":{"schema":{"type":"string"}}}}}}},"/api/v1/schemas":{"get":{"tags":["Schema Registry"],"summary":"Get all schema records.","description":"List all schema records in a paginated and/or sorted form. The result can be refined by providing schemaId, a list of one or more mimetypes and/or a date range. Returned schema record(s) must match. if 'schemaId' is provided all other parameters were skipped and all versions of the given schemaId record will be returned. If 'mimetype' is provided, a record matches if its associated mime type matchs. Furthermore, the UTC time of the last update can be provided in three different fashions: 1) Providing only updateFrom returns all records updated at or after the provided date, 2) Providing only updateUntil returns all records updated before or at the provided date, 3) Providing both returns all records updated within the provided date range. If no parameters are provided, all accessible records are listed. With regard to schema versions, only the most recent version of each schema is listed.","operationId":"getRecords","parameters":[{"name":"schemaId","in":"query","description":"SchemaId","required":false,"schema":{"type":"string"}},{"name":"mimeType","in":"query","description":"A list of mime types returned schemas are associated with.","required":false,"schema":{"type":"array","items":{"type":"string"}}},{"name":"from","in":"query","description":"The UTC time of the earliest update of a returned record.","required":false,"schema":{"type":"string","format":"date-time"}},{"name":"until","in":"query","description":"The UTC time of the latest update of a returned record.","required":false,"schema":{"type":"string","format":"date-time"}},{"name":"page","in":"query","description":"Zero-based page index (0..N)","schema":{"type":"integer","default":0}},{"name":"size","in":"query","description":"The size of the page to be returned","schema":{"type":"integer","default":20}},{"name":"sort","in":"query","description":"Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.","schema":{"type":"array","items":{"type":"string"}}}],"responses":{"200":{"description":"OK and a list of records or an empty list of no record matches.","content":{"application/hal+json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/MetadataSchemaRecord"}}}}},"401":{"description":"Unauthorized is returned if authorization in required but was not provided.","content":{"application/hal+json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/MetadataSchemaRecord"}}}}},"403":{"description":"Forbidden is returned if the caller has no sufficient privileges.","content":{"application/hal+json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/MetadataSchemaRecord"}}}}}}},"post":{"tags":["Schema Registry"],"summary":"Register a schema document and its record.","description":"This endpoint allows to register a schema document and its record. The record must contain at least an unique identifier (schemaId) and the type of the schema (type).","operationId":"createRecord","requestBody":{"content":{"multipart/form-data":{"schema":{"required":["record","schema"],"type":"object","properties":{"record":{"type":"string","description":"Json representation of the schema record.","format":"binary"},"schema":{"type":"string","description":"The metadata schema document associated with the record.","format":"binary"}}}}}},"responses":{"201":{"description":"Created is returned only if the record has been validated, persisted and the document was successfully validated and stored.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/MetadataSchemaRecord"}}}},"400":{"description":"Bad Request is returned if the provided metadata record is invalid or if the validation of the provided schema failed.","content":{"application/json":{"schema":{"type":"string"}}}},"409":{"description":"A Conflict is returned, if there is already a record for the provided schema id.","content":{"application/json":{"schema":{"type":"string"}}}},"401":{"description":"Unauthorized is returned if authorization in required but was not provided.","content":{"application/json":{"schema":{"type":"string"}}}},"403":{"description":"Forbidden is returned if the caller has no sufficient privileges.","content":{"application/json":{"schema":{"type":"string"}}}}}}},"/api/v1/schemas/{schemaId}/validate":{"post":{"tags":["Schema Registry"],"summary":"Validate a metadata document.","description":"Validate the provided metadata document using the addressed schema. If all parameters are provided, the schema is identified uniquely by schemaId and version. If the version is omitted, the most recent version of the schema is used. This endpoint returns HTTP NO_CONTENT if it succeeds. Otherwise, an error response is returned, e.g. HTTP UNPROCESSABLE_ENTITY (422) if validation fails.","operationId":"validate","parameters":[{"name":"schemaId","in":"path","description":"The record identifier or schema identifier.","required":true,"schema":{"type":"string"}},{"name":"version","in":"query","description":"The version of the record.","required":false,"schema":{"type":"integer","format":"int64"}}],"requestBody":{"content":{"multipart/form-data":{"schema":{"required":["document"],"type":"object","properties":{"document":{"type":"string","description":"The metadata file to validate against the addressed schema.","format":"binary"}}}}}},"responses":{"204":{"description":"No Content if validate succeeded.","content":{"application/hal+json":{"schema":{"type":"string"}}}},"404":{"description":"Not found is returned, if no schema for the provided schemaId and version was found.","content":{"application/hal+json":{"schema":{"type":"string"}}}},"422":{"description":"Unprocessable Entity if validation fails.","content":{"application/hal+json":{"schema":{"type":"string"}}}},"401":{"description":"Unauthorized is returned if authorization in required but was not provided.","content":{"application/hal+json":{"schema":{"type":"string"}}}},"403":{"description":"Forbidden is returned if the caller has no sufficient privileges.","content":{"application/hal+json":{"schema":{"type":"string"}}}}}}},"/api/v1/metadata":{"get":{"tags":["Metadata Repository"],"summary":"Get all records.","description":"List all records in a paginated and sorted form. The result can be refined by providing id, specific related resource id(s) and/or metadata schema id(s) valid records must match. If 'id' is provided all available versions for given 'id' will be returned and all other parameters will be ignored.If 'resourceId' and 'schemaId' are provided, a record matches if its related resource identifier AND the used metadata schema are matching. Furthermore, the UTC time of the last update can be provided in three different fashions: 1) Providing only updateFrom returns all records updated at or after the provided date, 2) Providing only updateUntil returns all records updated before or at the provided date, 3) Providing both returns all records updated within the provided date range.If no parameters are provided, all accessible records are listed. If versioning is enabled, only the most recent version is listed (except in case of 'id' is provided).","operationId":"getRecords_1","parameters":[{"name":"id","in":"query","description":"ID of the metadata document.","required":false,"schema":{"type":"string"}},{"name":"resourceId","in":"query","description":"A list of related resource identifiers.","required":false,"schema":{"type":"array","items":{"type":"string"}}},{"name":"schemaId","in":"query","description":"A list of metadata schema identifiers.","required":false,"schema":{"type":"array","items":{"type":"string"}}},{"name":"from","in":"query","description":"The UTC time of the earliest update of a returned record.","required":false,"schema":{"type":"string","format":"date-time"}},{"name":"until","in":"query","description":"The UTC time of the latest update of a returned record.","required":false,"schema":{"type":"string","format":"date-time"}},{"name":"page","in":"query","description":"Zero-based page index (0..N)","schema":{"type":"integer","default":0}},{"name":"size","in":"query","description":"The size of the page to be returned","schema":{"type":"integer","default":20}},{"name":"sort","in":"query","description":"Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.","schema":{"type":"array","items":{"type":"string"}}}],"responses":{"200":{"description":"OK and a list of records or an empty list of no record matches.","content":{"application/hal+json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/MetadataRecord"}}}}},"401":{"description":"Unauthorized is returned if authorization in required but was not provided.","content":{"application/hal+json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/MetadataRecord"}}}}},"403":{"description":"Forbidden is returned if the caller has no sufficient privileges.","content":{"application/hal+json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/MetadataRecord"}}}}}}},"post":{"tags":["Metadata Repository"],"summary":"Ingest a new metadata document and its record.","description":"This endpoint allows to create a new metadata record by providing the record metadata as JSON document as well as the actual metadata as file upload. The record metadata mainly contains the resource identifier the record is associated with as well as the identifier of the schema which can be used to validate the provided metadata document. In the current version, both parameters are required. If no schema version is given (if 'INTERNAL' referenceis used) the most recent schema version will be used.","operationId":"createRecord_1","requestBody":{"content":{"multipart/form-data":{"schema":{"required":["document","record"],"type":"object","properties":{"record":{"type":"string","description":"Json representation of the metadata record.","format":"binary"},"document":{"type":"string","description":"The metadata document associated with the record. The document must match the schema selected by the record.","format":"binary"}}}}}},"responses":{"201":{"description":"Created is returned only if the record has been validated, persisted and the document was successfully validated and stored.","content":{"application/hal+json":{"schema":{"$ref":"#/components/schemas/MetadataRecord"}}}},"400":{"description":"Bad Request is returned if the provided metadata record is invalid or if the validation using the provided schema failed.","content":{"application/hal+json":{"schema":{"type":"string"}}}},"404":{"description":"Not found is returned, if no schema for the provided schema id was found.","content":{"application/hal+json":{"schema":{"type":"string"}}}},"409":{"description":"A Conflict is returned, if there is already a record for the related resource id and the provided schema id.","content":{"application/hal+json":{"schema":{"type":"string"}}}},"401":{"description":"Unauthorized is returned if authorization in required but was not provided.","content":{"application/hal+json":{"schema":{"type":"string"}}}},"403":{"description":"Forbidden is returned if the caller has no sufficient privileges.","content":{"application/hal+json":{"schema":{"type":"string"}}}}}}},"/oaipmh":{"get":{"tags":["oai-pmh-controller"],"operationId":"processRequest","parameters":[{"name":"verb","in":"query","description":"OAI-PMH supported verb, e.g. GET_RECORD, IDENTIFY, LIST_IDENTIFIERS, LIST_METADATA_FORMATS, LIST_RECORDS, LIST_SETS.","required":true,"schema":{"type":"string"}},{"name":"from","in":"query","description":"OAI-PMH from date in a data format depending on the repository, e.g. yyyy-MM-dd'T'HH:mm:ss'Z'.","required":false,"schema":{"type":"string"},"example":"2017-05-10T10:41:00Z"},{"name":"until","in":"query","description":"OAI-PMH until date in a data format depending on the repository, e.g. yyyy-MM-dd'T'HH:mm:ss'Z'.","required":false,"schema":{"type":"string"},"example":"2017-05-10T10:41:00Z"},{"name":"set","in":"query","description":"OAI-PMH document set to harvest. Only available if sets are supported.","required":false,"schema":{"type":"string"}},{"name":"identifier","in":"query","description":"OAI-PMH metadata document identifier.","required":false,"schema":{"type":"string"}},{"name":"metadataPrefix","in":"query","description":"OAI-PMH metadata format prefix.","required":false,"schema":{"type":"string"}},{"name":"resumptionToken","in":"query","description":"OAI-PMH resumption token for pagination.","required":false,"schema":{"type":"string"}}],"responses":{"200":{"description":"OK","content":{"application/hal+json":{"schema":{"type":"string"}}}}}}}},"components":{"schemas":{"AclEntry":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"sid":{"type":"string"},"permission":{"type":"string","enum":["PERMISSION_NONE","PERMISSION_READ","PERMISSION_WRITE","PERMISSION_ADMINISTRATE"]}}},"MetadataSchemaRecord":{"required":["comment","createdAt","definition","doNotSync","label","lastUpdate","mimeType","pid","schemaDocumentUri","schemaHash","schemaId","schemaVersion","type"],"type":"object","properties":{"schemaVersion":{"type":"integer","format":"int64"},"label":{"type":"string"},"definition":{"type":"string"},"comment":{"type":"string"},"mimeType":{"type":"string"},"type":{"type":"string","enum":["JSON","XML"]},"createdAt":{"type":"string","format":"date-time"},"lastUpdate":{"type":"string","format":"date-time"},"acl":{"uniqueItems":true,"type":"array","items":{"$ref":"#/components/schemas/AclEntry"}},"schemaDocumentUri":{"type":"string"},"schemaHash":{"type":"string"},"doNotSync":{"type":"boolean"}}},"ResourceIdentifier":{"required":["id","identifier","identifierType"],"type":"object","properties":{"id":{"type":"integer","format":"int64"},"identifier":{"type":"string"},"identifierType":{"type":"string","enum":["ARK","arXiv","bibcode","DOI","EAN13","EISSN","Handle","IGSN","ISBN","ISSN","ISTC","LISSN","LSID","PMID","PURL","UPC","URL","URN","w3id","INTERNAL"]}}},"MetadataRecord":{"required":["acl","createdAt","documentHash","id","lastUpdate","metadataDocumentUri","pid","recordVersion","relatedResource","schema","schemaVersion"],"type":"object","properties":{"id":{"type":"string"},"pid":{"$ref":"#/components/schemas/ResourceIdentifier"},"relatedResource":{"$ref":"#/components/schemas/ResourceIdentifier"},"createdAt":{"type":"string","format":"date-time"},"lastUpdate":{"type":"string","format":"date-time"},"schema":{"$ref":"#/components/schemas/ResourceIdentifier"},"schemaVersion":{"type":"integer","format":"int64"},"recordVersion":{"type":"integer","format":"int64"},"acl":{"uniqueItems":true,"type":"array","items":{"$ref":"#/components/schemas/AclEntry"}},"metadataDocumentUri":{"type":"string"},"documentHash":{"type":"string"}}}}}}
